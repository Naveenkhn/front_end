# Javascript basics
====================

variable declaration:
---------------------
var test = "string";

semi colon at the end of line is optional.

7 basic data_types:
-------------------
string, number, boolean, BigInt, null, undefined and

if, else if, switch:
--------------------
syntax is similar to c++

for, while loop:
----------------
syntax similar to c++

Arrays:
-------
declaration and usage is similar to c++j
var num_array = [1, 2, 3, 4];

Functions:
----------
syntax:
function func_name(params)
{
....
}
function invocation and passing parameters are similar to c++ functions. But function definition begins with a keyword 'function'.
They dont mention return type explicitly like in c++.

Object literals and the dot notation:
-------------------------------------
One of the most common ways of building an object in JavaScript is using the object literal syntax: {}.

It essentially consists of two steps: 

1. Declaring a new variable and assigning an object literal to it - in other words, this: var assistantManager = {} 
2. Assigning the values to each of the object's keys, using the assignment operator, =

Notice that it's very easy to build any kind of an object in JavaScript using this example syntax.

For example, here's a table object:
var table = {
    legs: 3,
    color: "brown",
    priceUSD: 100,
}

To access the table object, I can simply console log the entire object:  
console.log(table);//display the object in the developer console

The returned value is the entire table object:  
{legs: 3, color: 'brown', priceUSD: 100}

Additionally, I can console log any individual property, like this:  
console.log(table.color); // 'brown'

Object Literals and the Brackets Notation
------------------------------------------
There is an alternative syntax to the dot notation I used up until this point. This alternative syntax is known as the brackets notation.

var house2 = {};
house2["rooms"] = 4;
house2['color']= "pink";
house2["priceUSD"] = 12345;
console.log(house2); // {rooms: 4, color: 'pink', priceUSD: 12345}

We can both access and update properties on objects using either the dot notation, or the brackets notation, or a combination of both, like in the following example:
var car = {};
car.color = "red";
car["color"] = "green";
car["speed"] = 200;
car.speed = 100;
console.log(car); // {color: "green", speed: 100}

With the brackets notation, I can add space characters inside property names, like this:  
car["number of doors"] = 4;
console.log(car); // {color: 'green', speed: 100, number of doors: 5}

Arrays are Objects
------------------
In JavaScript, arrays are objects. That means that arrays also have some built-in properties and methods.
One of the most commonly used built-in methods on arrays are the push() and the pop() methods.

To add new items to an array, I can use the push() method:
var fruits = [];
fruits.push("apple"); // ['apple']
fruits.push('pear'); // ['apple', 'pear']

To remove the last item from an array, I can use the pop() method:  
fruits.pop();
console.log(fruits); // ['apple']

Math object cheat sheet
-----------------------
JavaScript has handy built-in objects. One of these popular built-in objects is the Math object.

Here are some of the built-in number constants that exist on the Math object: 
1. The PI number: Math.PI which is approximately 3.14159
2. The Euler's constant: Math.E which is approximately 2.718
3. The natural logarithm of 2: Math.LN2 which is approximately 0.693

Rounding methods
Math.ceil() - rounds up to the closest integer 
Math.floor() - rounds down to the closest integer 
Math.round() - rounds up to the closest integer if the decimal is .5 or above; otherwise, rounds down to the closest integer 
Math.trunc() - trims the decimal, leaving only the integer

Arithmetic and calculus methods
Math.pow(2,3) - calculates the number 2 to the power of 3, the result is 8 
Math.sqrt(16) - calculates the square root of 16, the result is 4 
Math.cbrt(8) - finds the cube root of 8, the result is 2 
Math.abs(-10) - returns the absolute value, the result is 10 
Logarithmic methods: Math.log(), Math.log2(), Math.log10() 

Return the minimum and maximum values of all the inputs: Math.min(9,8,7) returns 7, Math.max(9,8,7) returns 9.

Trigonometric methods: Math.sin(), Math.cos(), Math.tan(), etc.



