# Javascript basics
====================

variable declaration:
---------------------
var test = "string";
Just like in python, variables are passed by reference.

**Trying to copy a variable value into a new variable does copy by reference. Hence if you change one variable it reflects on the other variable too.
Hence it requires special technique to create new variable with same data as existing one. (example: spread operator (...))

semi colon at the end of line is optional.

7 basic data_types:
-------------------
string, number, boolean, BigInt, null, undefined and

if, else if, switch:
--------------------
syntax is similar to c++

for, while loop:
----------------
syntax similar to c++

Arrays:
-------
declaration and usage is similar to c++j
var num_array = [1, 2, 3, 4];

Functions:
----------
syntax:
function func_name(params)
{
....
}
function invocation and passing parameters are similar to c++ functions. But function definition begins with a keyword 'function'.
They dont mention return type explicitly like in c++.

Object literals and the dot notation:
-------------------------------------
One of the most common ways of building an object in JavaScript is using the object literal syntax: {}.

It essentially consists of two steps: 

1. Declaring a new variable and assigning an object literal to it - in other words, this: var assistantManager = {} 
2. Assigning the values to each of the object's keys, using the assignment operator, =

Notice that it's very easy to build any kind of an object in JavaScript using this example syntax.

For example, here's a table object:
var table = {
    legs: 3,
    color: "brown",
    priceUSD: 100,
}

To access the table object, I can simply console log the entire object:  
console.log(table);//display the object in the developer console

The returned value is the entire table object:  
{legs: 3, color: 'brown', priceUSD: 100}

Additionally, I can console log any individual property, like this:  
console.log(table.color); // 'brown'

Object Literals and the Brackets Notation
------------------------------------------
There is an alternative syntax to the dot notation I used up until this point. This alternative syntax is known as the brackets notation.

var house2 = {};
house2["rooms"] = 4;
house2['color']= "pink";
house2["priceUSD"] = 12345;
console.log(house2); // {rooms: 4, color: 'pink', priceUSD: 12345}

We can both access and update properties on objects using either the dot notation, or the brackets notation, or a combination of both, like in the following example:
var car = {};
car.color = "red";
car["color"] = "green";
car["speed"] = 200;
car.speed = 100;
console.log(car); // {color: "green", speed: 100}

With the brackets notation, I can add space characters inside property names, like this:  
car["number of doors"] = 4;
console.log(car); // {color: 'green', speed: 100, number of doors: 5}

Arrays are Objects
------------------
In JavaScript, arrays are objects. That means that arrays also have some built-in properties and methods.
One of the most commonly used built-in methods on arrays are the push() and the pop() methods.

To add new items to an array, I can use the push() method:
var fruits = [];
fruits.push("apple"); // ['apple']
fruits.push('pear'); // ['apple', 'pear']

To remove the last item from an array, I can use the pop() method:  
fruits.pop();
console.log(fruits); // ['apple']

Math object cheat sheet
-----------------------
JavaScript has handy built-in objects. One of these popular built-in objects is the Math object.

Here are some of the built-in number constants that exist on the Math object: 
1. The PI number: Math.PI which is approximately 3.14159
2. The Euler's constant: Math.E which is approximately 2.718
3. The natural logarithm of 2: Math.LN2 which is approximately 0.693

Rounding methods
Math.ceil() - rounds up to the closest integer 
Math.floor() - rounds down to the closest integer 
Math.round() - rounds up to the closest integer if the decimal is .5 or above; otherwise, rounds down to the closest integer 
Math.trunc() - trims the decimal, leaving only the integer

Arithmetic and calculus methods
Math.pow(2,3) - calculates the number 2 to the power of 3, the result is 8 
Math.sqrt(16) - calculates the square root of 16, the result is 4 
Math.cbrt(8) - finds the cube root of 8, the result is 2 
Math.abs(-10) - returns the absolute value, the result is 10 
Logarithmic methods: Math.log(), Math.log2(), Math.log10() 

Return the minimum and maximum values of all the inputs: Math.min(9,8,7) returns 7, Math.max(9,8,7) returns 9.

Trigonometric methods: Math.sin(), Math.cos(), Math.tan(), etc.

Comparing var, let and const
----------------------------
'var' for variable declaration makes the variable usage lenient.
1. allows usage before declaration line and initialisation
2. allows re-declaration of same variable.
3. Not strict about global and local scope.

'let' and 'const' makes usage of variables strict
if variable is declared using 'let', it cant be used before the declaration line, otherwise throws error.
but it allows usage without initialisation.
Also they make scope local to where its defined.
if variable is declared using 'const', it has to be initialised immediately and cant be used before declaration and cant be reassigned.

Object Oriented Programming principles
---------------------------------------
The Benefits of OOP
Allows you to write modular code,
Makes your code more flexible and
Makes your code reusable.

Classes
-------
Syntax of class definition is similar to c++. 
No semi colon at the end.
Name of constructor is "constructor" itself unlike in c++ where it is class name itself.

class Train {
    constructor(color, lightsOn) {
        this.color = color;
        this.lightsOn = lightsOn;
    }
}

To create a class variable
var myFirstTrain = new Train('red', false);

To get the prototype, you'll be using JavaScript's built-in Object.getPrototypeOf() method, and passing it this object
 
To inherit from one class to a new sub-class, JavaScript provides the extends keyword, which works as follows:

class HighSpeedTrain extends Train {
}

Again, you can start by defining its constructor function:
class HighSpeedTrain extends Train {
    constructor(passengers, highSpeedOn, color, lightsOn) {
        super(color, lightsOn);
        this.passengers = passengers;
        this.highSpeedOn = highSpeedOn;
    }
}

In JavaScript classes, super is used to specify what property gets inherited from the super-class in the sub-class.

To call base class methods, here they use super similar to class::scope_resolution operator in c++

Default Parameters
------------------
Syntax similar to c++

De-structuring arrays and objects
---------------------------------
Copying data from existing properties from objects and arrays

let {PI} = Math;
console.log(PI);

It is same as below code:
let PIE = Math.PI;
console.log(PIE);

Object.create()
----------------
The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object.

const person = {
  isHuman: false,
  printIntroduction: function() {
    console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
  }
};

const me = Object.create(person);

me.name = 'Matthew'; // "name" is a property set on "me", but not on "person"
me.isHuman = true; // Inherited properties can be overwritten

me.printIntroduction();
// Expected output: "My name is Matthew. Am I human? true"

for...of and for...in
---------------------
The for...of statement executes a loop that operates on a sequence of values sourced from an iterable object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables.

Syntax:
for (variable of iterable)
  statement

for of loop cannot work on an object directly, since an object is not iterable. For example:
const car = {
    speed: 100,
    color: "blue"
}

for(prop of car) {      // Uncaught TypeError: car is not iterable
    console.log(prop) 
}

The for...in statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.

Syntax:
for (variable in object)
  statement

In JavaScript for in loops, iterate over the properties of the object and its prototype. While for of loops do this only for the objects' properties.

Object.keys(), Object.values(), Object.entries()
-------------------------------------------------
The Object.keys() static method returns an array of a given object's own enumerable string-keyed property names.
const car2 = {
    speed: 200,
    color: "red"
}
console.log(Object.keys(car2)); // ['speed','color']

The Object.values() static method returns an array of a given object's own enumerable string-keyed property values.
const car3 = {
    speed: 300,
    color: "yellow"
}
console.log(Object.values(car3)); // [300, 'yellow']

The Object.entries() static method returns an array of a given object's own enumerable string-keyed property key-value pairs.
const car4 = {
    speed: 400,
    color: 'magenta'
}
console.log(Object.entries(car4)); //[ ['speed', 400], ['color', 'magenta'] ]

Template literals:
------------------
Template literals are an alternative way of working with strings, which was introduced in the ES6 addition to the JavaScript language.

Up until ES6, the only way to build strings in JavaScript was to delimit them in either single quotes or double quotes:
'Hello, World!'
"Hello, World!"

Alongside the previous ways to build strings, ES6 introduced the use of backtick characters as delimiters:  
`Hello, World!`

Advantages:
variable interpolation: 
let greet = "Hello";
let place = "World";
console.log(`${greet} ${place} !`) //display both variables using template literals

 In other words, in ES5, the above example would have to be written as follows:  
console.log(greet + " " + place + "!"); //display both variables without using template literals

Besides variable interpolation, template strings can span multiple lines.
`Hello,
World
!
`
Additionally, the reason why it's possible to interpolate variables in template literals is because this syntax actually allows for expression evaluation. 
//it's possible to perform arithmetic operation inside a template literal expression
console.log(`${1 + 1 + 1 + 1 + 1} stars!`) 

With template literals you don't need to worry about the limitations of using single and double quotes.

The forEach() method
--------------------
Arrays in JavaScript come with a handy method that allows you to loop over each of their members. 

To explain the syntax, the forEach() method accepts a function that will work on each array item. That function's first parameter is the current array item itself, and the second (optional) parameter is the index.

Very often, the function that the forEach() method needs to use is passed in directly into the method call, like this:

const veggies = ['onion', 'garlic', 'potato'];
veggies.forEach( function(veggie, index) {
    console.log(`${index}. ${fruit}`);
});

The filter() method
-------------------
Another very useful method on the array is the filter() method. It filters your arrays based on a specific test. Those array items that pass the test are returned.

const nums = [0,10,20,30,40,50];
nums.filter( function(num) {
    return num > 20;
})

Here's the returned array value:  
[30,40,50]

The map method
---------------
This method is used to map each array item over to another array's item, based on whatever work is performed inside the function that is passed-in to the map as a parameter. 

[0,10,20,30,40,50].map( function(num) {
    return num / 10
})

The return value from the above code is:  
[0,1,2,3,4,5]

Working with Maps in JavaScript
-------------------------------
To make a new Map, you can use the Map constructor:
new Map();

For example:
let bestBoxers = new Map();
bestBoxers.set(1, "The Champion");
bestBoxers.set(2, "The Runner-up");
bestBoxers.set(3, "The third place");

console.log(bestBoxers);

Here's the console output:  
Map(3) {1 => 'The Champion', 2 => 'The Runner-up', 3 => 'The third place'}

To get a specific value, you need to use the get() method. For example:  
bestBoxers.get(1); // 'The Champion'

Working with Sets in JavaScript
--------------------------------
Set is similar to array except it only allows unique elements.

To build a new set, you can use the Set constructor:
new Set();

The Set constructor can, for example, accept an array.
This means that we can use it to quickly filter an array for unique members.

const repetitiveFruits = ['apple','pear','apple','pear','plum', 'apple'];
const uniqueFruits = new Set(repetitiveFruits);
console.log(uniqueFruits);

The above code outputs the following in the console:  
{'apple', 'pear', 'plum'}

Using Spread and Rest
---------------------
Join arrays, objects using the rest operator

const fruits = ['apple', 'pear', 'plum']
const berries = ['blueberry', 'strawberry']
const fruitsAndBerries = [...fruits, ...berries] // concatenate
console.log(fruitsAndBerries); // outputs a single array

['apple', 'pear', 'plum', 'blueberry', 'strawberry']

Add new members to arrays without using the push() method
Here's how to use the spread operator to easily add one or more members to an existing array:

let veggies = ['onion', 'parsley'];
veggies = [...veggies, 'carrot', 'beetroot'];
console.log(veggies);

Here's the output:
['onion', 'parsley', 'carrot', 'beetroot']

Convert a string to an array using the spread operator
Given a string, it's easy to spread it out into separate array items:

const greeting = "Hello";
const arrayOfChars = [...greeting];
console.log(arrayOfChars); //  ['H', 'e', 'l', 'l', 'o']

Copy either an object or an array into a separate one
const fruits1 = ['apples', 'pears']
const fruits2 = [...fruits]
fruits1.pop()
console.log(fruits1, "not", fruits2)

This time, the output is:
['apples'] 'not' ['apples','pears']

JavaScript Modules
------------------
Modules allow for code to be reused and more easily replaced.
Modules were added to ECMAScript ES6 specification  
To use an ES6 module in a browser, you need to set the script type attribute to “module”

Exporting module features
The first thing you do to get access to module features is export them. This is done using the export statement.

export const name = "square";

export function draw(ctx, length, x, y, color) {
  ctx.fillStyle = color;
  ctx.fillRect(x, y, length, length);

  return { length, x, y, color };
}

You can export functions, var, let, const, and — as we'll see later — classes. They need to be top-level items; you can't use export inside a function, for example.

A more convenient way of exporting all the items you want to export is to use a single export statement at the end of your module file, followed by a comma-separated list of the features you want to export wrapped in curly braces. For example:

export { name, draw, reportArea, reportPerimeter };

Importing features into your script
Once you've exported some features out of your module, you need to import them into your script to be able to use them. The simplest way to do this is as follows:

import { name, draw, reportArea, reportPerimeter } from "./modules/square.js";

You use the import statement, followed by a comma-separated list of the features you want to import wrapped in curly braces, followed by the keyword from, followed by the module specifier.

The module specifier provides a string that the JavaScript environment can resolve to a path to the module file. In a browser, this could be a path relative to the site root, which for our basic-modules example would be /js-examples/module-examples/basic-modules

JS DOM
-------
The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects; that way, programming languages can interact with the page.

For example, the DOM specifies that the querySelectorAll method in this code snippet must return a list of all the <p> elements in the document:

const paragraphs = document.querySelectorAll("p");
// paragraphs[0] is the first <p> element
// paragraphs[1] is the second <p> element, etc.
alert(paragraphs[0].nodeName);

The DOM is not a programming language, but without it, the JavaScript language wouldn't have any model or notion of web pages, HTML documents, SVG documents, and their component parts. The document as a whole, the head, tables within the document, table headers, text within the table cells, and all other elements in a document are parts of the document object model for that document. They can all be accessed and manipulated using the DOM and a scripting language like JavaScript.

Fundamental data types
----------------------
Document - When a member returns an object of type document (e.g., the ownerDocument property of an element returns the document to which it belongs), this object is the root document object itself.
Node - Every object located within a document is a node of some kind. In an HTML document, an object can be an element node but also a text node or attribute node.
Element - The element type is based on node. It refers to an element or a node of type element returned by a member of the DOM API.
NodeList - A nodeList is an array of elements, like the kind that is returned by the method document.querySelectorAll().
Attr - When an attribute is returned by a member (e.g., by the createAttribute() method), it is an object reference that exposes a special (albeit small) interface for attributes. Attributes are nodes in the DOM just like elements are, though you may rarely use them as such.
NamedNodeMap - A namedNodeMap is like an array, but the items are accessed by name or index, though this latter case is merely a convenience for enumeration, as they are in no particular order in the list.

The following is a brief list of common APIs in web and XML page scripting using the DOM.
document.querySelector(selector)
document.querySelectorAll(name)
document.createElement(name)
parentNode.appendChild(node)
element.innerHTML
element.style.left
element.setAttribute()
element.getAttribute()
element.addEventListener()
window.content
Window.onload
window.scrollTo()

Example :
Setting text content

HTML
<div class="container">
  <textarea class="story"></textarea>
  <button id="set-text" type="button">Set text content</button>
  <button id="clear-text" type="button">Clear text content</button>
</div>

CSS
.container {
  display: flex;
  gap: 0.5rem;
  flex-direction: column;
}

button {
  width: 200px;
}

JavaScript
const story = document.body.querySelector(".story");

const setText = document.body.querySelector("#set-text");
setText.addEventListener("click", () => {
  story.textContent = "It was a dark and stormy night...";
});

const clearText = document.body.querySelector("#clear-text");
clearText.addEventListener("click", () => {
  story.textContent = "";
});

JavaScript Selectors:
---------------------
These are nothing but APIs to select fields on DOM
Example:
querySelector, querySelectorAll, getElementByID, getElementsByClassName etc

Event Handling :
----------------
This can be done in two ways.
1. HTML Event attributes
2. Creating Event Listener in JavaScript




